{"version":3,"sources":["components/Table.js","components/Form.js","components/EditPopup.js","App.js","index.js"],"names":["TableHead","TableBody","props","rows","characterData","map","row","index","name","job","className","onClick","handleEditPopup","removeCharacter","Table","this","characters","length","Component","Form","initialState","state","changed","handleChange","event","target","value","setState","handleSubmit","addCharacter","noFieldEmpty","Object","values","every","element","trim","htmlFor","type","id","onChange","disabled","EditPopup","handleConfirm","handleCancel","character","anyFieldChanged","some","includes","App","openEditPopup","keys","forEach","key","splice","filter","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b737d084.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst TableHead = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>Manage</th>\n      </tr>\n    </thead>\n  );\n};\n\nconst TableBody = (props) => {\n  // console.log({ props });\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button\n            className=\"edit\"\n            onClick={() => props.handleEditPopup(true, row, index)}\n          >\n            Edit\n          </button>\n          <button\n            className=\"delete\"\n            onClick={() => props.removeCharacter(index)}\n          >\n            Delete\n          </button>\n        </td>\n      </tr>\n    );\n  });\n  return <tbody>{rows}</tbody>;\n};\n\nclass Table extends Component {\n  render() {\n    const { characters, handleEditPopup, removeCharacter } = this.props;\n    return characters.length ? (\n      <table>\n        <TableHead />\n        <TableBody\n          characterData={characters}\n          handleEditPopup={handleEditPopup}\n          removeCharacter={removeCharacter}\n        />\n      </table>\n    ) : (\n      <p>No data to show</p>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  initialState = {\n    name: \"\",\n    job: \"\",\n  };\n  state = this.initialState;\n  changed = {\n    name: false,\n    job: false,\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n    this.changed[name] = true;\n  };\n\n  handleSubmit = () => {\n    // console.log(\"handleSubmit called\");\n    this.props.addCharacter(this.state);\n    // re-initialize variables\n    this.setState(this.initialState);\n    this.changed = { name: false, job: false };\n  };\n\n  render() {\n    const { name, job } = this.state;\n    const noFieldEmpty = Object.values(this.state).every((element) =>\n      element.trim()\n    );\n    // console.log(\"render called\", noFieldEmpty, this.changed.name);\n    return (\n      <form>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          className={\n            this.changed.name ? (name.trim() ? \"is-success\" : \"has-error\") : \"\"\n          }\n          value={name}\n          onChange={this.handleChange}\n        />\n        <label htmlFor=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          className={\n            this.changed.job ? (job.trim() ? \"is-success\" : \"has-error\") : \"\"\n          }\n          value={job}\n          onChange={this.handleChange}\n        />\n        <input\n          type=\"button\"\n          value=\"Add\"\n          disabled={noFieldEmpty ? false : true}\n          onClick={this.handleSubmit}\n        />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\n\nclass EditPopup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.character };\n    this.changed = {\n      name: false,\n      job: false,\n    };\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n    this.changed[name] = true;\n  };\n\n  handleConfirm = () => {\n    // console.log(\"handleConfirm called\", this.state, this.props.index);\n    this.props.handleEditPopup(false, this.state, this.props.index);\n  };\n\n  handleCancel = () => {\n    this.props.handleEditPopup(false, this.props.character);\n  };\n\n  render() {\n    const { character } = this.props;\n    const { name, job } = this.state;\n    const noFieldEmpty = Object.values(this.state).every((element) =>\n      element.trim()\n    );\n    const anyFieldChanged = Object.values(this.state).some(\n      (element) => !Object.values(character).includes(element.trim())\n    );\n    // console.log(\"render called\", this.changed, {\n    //   noFieldEmpty,\n    //   anyFieldChanged,\n    // });\n    return (\n      <div className=\"popup\" id=\"edit-popup\">\n        <div className=\"popup-content\">\n          <h1>Edit data</h1>\n          <form>\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              className={\n                name.trim()\n                  ? name.trim() !== character.name\n                    ? this.changed.name\n                      ? name.trim()\n                        ? \"is-success\"\n                        : \"has-error\"\n                      : \"\"\n                    : \"\"\n                  : \"has-error\"\n              }\n              value={name}\n              onChange={this.handleChange}\n            />\n            <label htmlFor=\"job\">Job</label>\n            <input\n              type=\"text\"\n              name=\"job\"\n              id=\"job\"\n              className={\n                job.trim()\n                  ? job.trim() !== character.job\n                    ? this.changed.job\n                      ? job.trim()\n                        ? \"is-success\"\n                        : \"has-error\"\n                      : \"\"\n                    : \"\"\n                  : \"has-error\"\n              }\n              value={job}\n              onChange={this.handleChange}\n            />\n            <input\n              type=\"button\"\n              value=\"Confirm\"\n              disabled={noFieldEmpty && anyFieldChanged ? false : true}\n              onClick={this.handleConfirm}\n            />\n            <input type=\"button\" value=\"Cancel\" onClick={this.handleCancel} />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditPopup;\n","import React, { Component } from \"react\";\nimport Table from \"./components/Table\";\nimport Form from \"./components/Form\";\nimport EditPopup from \"./components/EditPopup\";\n\nclass App extends Component {\n  state = {\n    characters: [],\n    openEditPopup: false,\n    character: null,\n    index: null,\n  };\n\n  addCharacter = (character) => {\n    // trim all values in character\n    Object.keys(character).forEach((key) => {\n      character[key] = character[key].trim();\n    });\n    this.setState({\n      characters: [...this.state.characters, character],\n    });\n  };\n\n  handleEditPopup = (openEditPopup, character, index = null) => {\n    const { characters } = this.state;\n    // trim all values in character\n    Object.keys(character).forEach((key) => {\n      character[key] = character[key].trim();\n    });\n    // console.log(\n    //   \"handleEditPopup called\",\n    //   openEditPopup,\n    //   character,\n    //   index,\n    //   this.state\n    // );\n    if (index !== null) {\n      characters.splice(index, 1, character);\n    }\n    this.setState({\n      characters: characters,\n      openEditPopup: openEditPopup,\n      character: character,\n      index: index,\n    });\n    // console.log(\"handleEditPopup result\", this.state);\n  };\n\n  removeCharacter = (index) => {\n    const { characters } = this.state;\n    this.setState({\n      characters: characters.filter((element, i) => i !== index),\n    });\n  };\n\n  render() {\n    const { characters, openEditPopup, character, index } = this.state;\n    // console.log({ characters, openEditPopup, character, index });\n    return (\n      <div className=\"container\">\n        <h1>Available data</h1>\n        <Table\n          characters={characters}\n          handleEditPopup={this.handleEditPopup}\n          removeCharacter={this.removeCharacter}\n        />\n        <h1>Add new data</h1>\n        <Form addCharacter={this.addCharacter} />\n        {openEditPopup ? (\n          <EditPopup\n            character={character}\n            handleEditPopup={this.handleEditPopup}\n            index={index}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}